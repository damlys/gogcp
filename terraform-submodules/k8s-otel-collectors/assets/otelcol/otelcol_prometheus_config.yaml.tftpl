receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: otel-collector
          scrape_interval: 10s
          static_configs:
            - targets:
                - 0.0.0.0:8888
processors:
  batch: {}
  transform:
    metric_statements:
      - context: datapoint
        statements:
          - set(attributes["namespace"], resource.attributes["k8s.namespace.name"])
          - set(attributes["container"], resource.attributes["k8s.container.name"])
          - set(attributes["pod"], resource.attributes["k8s.pod.name"])
          - set(attributes["pod_id"], resource.attributes["k8s.pod.uid"])
          - set(attributes["node"], resource.attributes["k8s.node.name"])
          - set(attributes["app"], resource.attributes["k8s-app"])
  k8sattributes:
    extract:
      labels:
        - from: pod
          key_regex: (.*)
          tag_name: $$1
      metadata:
        - k8s.namespace.name
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - k8s.job.name
        - k8s.node.name
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.pod.start_time
    passthrough: false
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: resource_attribute
            name: k8s.pod.uid
      - sources:
          - from: connection
exporters:
  otlphttp/mimir:
    endpoint: "${mimir_entrypoint}/otlp"
  debug:
    verbosity: detailed
service:
  pipelines:
    metrics:
      receivers: [prometheus]
      processors: [k8sattributes, transform, batch]
      exporters: [otlphttp/mimir]
