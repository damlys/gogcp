receivers:
  otlp:
    protocols:
      grpc:
        endpoint: "$${env:K8S_POD_IP}:4317"
      http:
        endpoint: "$${env:K8S_POD_IP}:4318"

  filelog/logs: # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/filelogreceiver/README.md
    include_file_name: false
    include_file_path: true
    include:
      - /var/log/pods/*/*/*.log
    exclude:
      # format is /var/log/pods/<namespace_name>_<pod_name>_<pod_uid>/<container_name>/<run_id>.log
      - /var/log/pods/lgtm-*_*_*/*/*.log # Grafana namespaces
      - /var/log/pods/otel-*_*_*/*/*.log # OpenTelemetry namespaces
    operators:
      - id: container-parser
        type: container # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/pkg/stanza/docs/operators/container.md
        max_log_size: 102400 # bytes, it's 100 KiB
    retry_on_failure:
      enabled: true

  prometheus:
    config:
      scrape_configs:
        - job_name: "$${env:K8S_POD_NAME}"
          scrape_interval: 30s
          static_configs:
            - targets:
                - "$${env:K8S_POD_IP}:8888"

processors:
  batch: {}

  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25

  k8sattributes: # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/k8sattributesprocessor/README.md
    auth_type: serviceAccount
    passthrough: false
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.uid
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: connection
    extract:
      metadata:
        - k8s.node.name
        - k8s.namespace.name
        - k8s.pod.name
        - k8s.deployment.name
        - k8s.replicaset.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - k8s.job.name
      labels:
        - from: pod
          key_regex: (.*)
          tag_name: $$1

exporters:
  otlphttp/loki:
    endpoint: "${loki_entrypoint}/otlp"

  otlphttp/mimir:
    endpoint: "${mimir_entrypoint}/otlp"

  otlphttp/tempo:
    endpoint: "${tempo_entrypoint}"

  prometheusremotewrite/mimir:
    endpoint: "${mimir_entrypoint}/api/v1/push"
    resource_to_telemetry_conversion:
      enabled: true

  debug/logs:
    verbosity: detailed

  debug/metrics:
    verbosity: detailed

  debug/traces:
    verbosity: detailed

extensions:
  health_check:
    endpoint: "$${env:K8S_POD_IP}:13133"
#
#
# service:
#   pipelines:
#     logs:
#       receivers: []
#       processors: []
#       exporters: []
#     metrics:
#       receivers: []
#       processors: []
#       exporters: []
#     traces:
#       receivers: []
#       processors: []
#       exporters: []
#
#   extensions:
#     - health_check
#
#
