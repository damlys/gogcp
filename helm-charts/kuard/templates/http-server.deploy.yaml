apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-http-server"
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/component: http-server
    {{- include "kuard.metadataLabels" $ | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: http-server
      {{- include "kuard.selectorLabels" $ | nindent 6 }}
  replicas: {{ .Values.httpServer.minReplicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/component: http-server
        {{- include "kuard.metadataLabels" $ | nindent 8 }}
      annotations:
        checksum/configs: "{{ include "kuard.configsChecksum" $ }}"
    spec:
      {{- if .Values.serviceAccountName }}
      serviceAccountName: "{{ .Values.serviceAccountName }}"
      {{- end}}
      containers:
        - name: http-server
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          envFrom:
            - configMapRef:
                name: "{{ .Release.Name }}-config-envs"
            - secretRef:
                name: "{{ .Release.Name }}-config-envs"
          volumeMounts:
            - name: config-files
              mountPath: /run/secrets/kuard
              readOnly: true
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              port: http
              path: /healthy
          readinessProbe:
            httpGet:
              port: http
              path: /ready
          livenessProbe:
            httpGet:
              port: http
              path: /healthy
          resources:
            requests:
              cpu: 25m
              memory: 32Mi
            limits:
              cpu: 200m
              memory: 256Mi
          securityContext: # container security context
            privileged: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            runAsUser: 1000
            runAsGroup: 3000
      securityContext: # pod security context
        fsGroup: 2000
      volumes:
        - name: config-files
          projected:
            sources:
              - configMap:
                  name: "{{ .Release.Name }}-config-files"
              - secret:
                  name: "{{ .Release.Name }}-config-files"
